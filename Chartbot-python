import os
import extract_msg
import json
from flask import Flask, render_template, request, jsonify
from fuzzywuzzy import fuzz
import spacy
from threading import Thread
import re

# Load SpaCy model for entity recognition (if required)
nlp = spacy.load("en_core_web_sm")

# Flask app setup
app = Flask(__name__)

# Knowledge base file path
KNOWLEDGE_BASE_FILE = "knowledge_base.json"

# Path to the directory where .msg files are stored
MSG_DIRECTORY = "C:/users/x01358215/krishna"  # Update this with your actual directory path

# Ensure the knowledge base exists
if not os.path.exists(KNOWLEDGE_BASE_FILE):
    with open(KNOWLEDGE_BASE_FILE, 'w') as f:
        json.dump([], f)

# Function to read and extract data from a .msg file
def read_msg(file_path):
    msg = extract_msg.Message(file_path)
    return {
        'sender': msg.sender,
        'subject': msg.subject,
        'date': msg.date,
        'body': msg.body
    }

# Function to clean email content (remove signatures, disclaimers, etc.)
def clean_email_body(body):
    body = re.sub(r'(?i)Best regards.*|Sincerely.*|Kind regards.*', '', body)
    body = re.sub(r'--\s*', '', body)
    body = re.sub(r'(?i)This email and any.*confidentiality.*disclaimer.*', '', body)
    return body.strip()

# Function to store extracted email data in the knowledge base (JSON)
def store_knowledge(subject, sender, body, entities, file_path=KNOWLEDGE_BASE_FILE):
    knowledge_entry = {
        "subject": subject,
        "sender": sender,
        "body": body,
        "entities": entities
    }
    with open(file_path, 'r') as f:
        knowledge_base = json.load(f)
    
    knowledge_base.append(knowledge_entry)

    with open(file_path, 'w') as f:
        json.dump(knowledge_base, f, indent=4)

# Function to process all .msg files in the given directory
def process_msg_files():
    for filename in os.listdir(MSG_DIRECTORY):
        if filename.endswith(".msg"):
            file_path = os.path.join(MSG_DIRECTORY, filename)
            print(f"Processing {filename}...")
            # Read the email from the .msg file
            email_data = read_msg(file_path)
            # Clean the email body
            cleaned_body = clean_email_body(email_data['body'])
            # Store the knowledge (subject, sender, cleaned body) in the knowledge base
            store_knowledge(email_data['subject'], email_data['sender'], cleaned_body, [])

# Call process_msg_files to load knowledge when the app starts
process_msg_files()

# Function to search the knowledge base using fuzzy matching
def search_knowledge_base(query):
    with open(KNOWLEDGE_BASE_FILE, 'r') as f:
        knowledge_base = json.load(f)
    
    results = []
    for entry in knowledge_base:
        score = fuzz.ratio(query.lower(), entry['subject'].lower())
        if score > 70:
            results.append({
                "subject": entry['subject'],
                "body": entry['body']
            })
    
    return results

# Flask routes
@app.route("/")
def index():
    return render_template("index.html")

@app.route("/ask", methods=["POST"])
def ask():
    user_query = request.form['query']
    results = search_knowledge_base(user_query)
    return jsonify(results)

# Run Flask app in a separate thread so it doesn't block the notebook
def run_flask():
    app.run(debug=True, use_reloader=False)

# Start the Flask app in a separate thread
flask_thread = Thread(target=run_flask)
flask_thread.start()
