# main.py

import os
import msgparser  # Library to parse .msg files
from flask import Flask, render_template, request
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from collections import Counter

nltk.download('punkt')
nltk.download('stopwords')

app = Flask(__name__)

# Define the folder where your .msg files are stored
EMAIL_FOLDER = "C:/Users/x01358215/krishna"

# Helper function to read and parse .msg files
def read_msg_files():
    emails = []
    for filename in os.listdir(EMAIL_FOLDER):
        if filename.endswith(".msg"):
            file_path = os.path.join(EMAIL_FOLDER, filename)
            try:
                msg = msgparser.parse(file_path)
                emails.append(msg.body)  # Get email body text
            except Exception as e:
                print(f"Failed to read {filename}: {e}")
    return emails

# Function to clean and preprocess text
def preprocess_text(text):
    # Tokenize the text
    tokens = word_tokenize(text.lower())  # Convert text to lowercase and tokenize
    stop_words = set(stopwords.words('english'))  # Load English stopwords
    filtered_tokens = [token for token in tokens if token.isalnum() and token not in stop_words]
    return filtered_tokens

# Function to match query with email content
def match_query_with_email(query, emails):
    query_tokens = preprocess_text(query)
    response_scores = []

    for email in emails:
        email_tokens = preprocess_text(email)
        common_tokens = set(query_tokens) & set(email_tokens)  # Find common words between query and email
        score = len(common_tokens)
        response_scores.append((score, email))  # Store score and corresponding email

    # Sort emails based on score (higher is better)
    response_scores.sort(reverse=True, key=lambda x: x[0])
    
    # Return the most relevant email or a fallback message if no match is found
    if response_scores and response_scores[0][0] > 0:
        return response_scores[0][1]  # Return the most relevant email text
    else:
        return "Sorry, I couldn't find an answer in the emails."

# Route to display the chatbot interface
@app.route('/')
def index():
    return render_template('index.html')

# Route to handle user query and provide response
@app.route('/ask', methods=['POST'])
def ask():
    user_query = request.form['query']
    emails = read_msg_files()  # Read the emails (this can be done once, and cached for performance)
    response = match_query_with_email(user_query, emails)
    return render_template('index.html', query=user_query, response=response)

if __name__ == "__main__":
    app.run(debug=True)
